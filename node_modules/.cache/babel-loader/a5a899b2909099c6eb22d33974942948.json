{"ast":null,"code":"import api from '@/services/api.ts';\nimport Message from '@/components/Message.vue';\nexport default {\n  name: 'Register',\n  data: () => ({\n    valid: true,\n    msg: \"\",\n    formData: {\n      Login: '',\n      Password: '',\n      ConfirmPassword: '',\n      Email: ''\n    },\n    show1: false,\n    show2: false,\n    password: 'Password',\n    confirmPassword: 'ConfirmPassword',\n    rules: {\n      required: value => !!value || 'Required.',\n      min: v => v.length >= 4 || 'Min 4 characters'\n    },\n    loginRules: [v => v.length >= 4 || 'Min 4 characters', v => !!v || 'Login is required', v => v && v.length <= 10 || 'Login must be less than 10 characters'],\n    emailRules: [v => !!v || 'E-mail is required', v => /.+@.+\\..+/.test(v) || 'E-mail must be valid']\n  }),\n  components: {\n    Message\n  },\n  methods: {\n    cleanForm() {\n      this.formData.Login = \"\";\n      this.formData.Password = \"\";\n      this.formData.ConfirmPassword = \"\";\n      this.formData.Email = \"\";\n    },\n\n    async createUser() {\n      await api.post(\"/Users\", this.formData).then(response => {\n        this.msg = response.data;\n      }).catch(error => {\n        console.log(error.response);\n      });\n      setTimeout(() => this.msg = \"\", 3000); // quando criado, rotear para /login\n\n      exit();\n    },\n\n    exit() {\n      this.$route.go(-1);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAsFA;AACA;AACA;EAEAA,gBAFA;EAIAC;IACAC,WADA;IAEAC,OAFA;IAGAC;MACAC,SADA;MAEAC,YAFA;MAGAC,mBAHA;MAIAC;IAJA,CAHA;IASAC,YATA;IAUAC,YAVA;IAWAC,oBAXA;IAYAC,kCAZA;IAaAC;MACAC,yCADA;MAEAC;IAFA,CAbA;IAiBAC,aACAC,wCADA,EAEAA,+BAFA,EAGAA,mEAHA,CAjBA;IAsBAC,aACAD,gCADA,EAEAA,kDAFA;EAtBA,EAJA;EA+BAE;IACAC;EADA,CA/BA;EAkCAC;IACAC;MACA;MACA;MACA;MACA;IACA,CANA;;IAOA;MAEA,wCACAC,IADA,CACAC;QACA;MACA,CAHA,EAIAC,KAJA,CAIAC;QACAC;MACA,CANA;MAQAC,sCAVA,CAWA;;MACAC;IACA,CApBA;;IAqBAA;MACA;IACA;;EAvBA;AAlCA","names":["name","data","valid","msg","formData","Login","Password","ConfirmPassword","Email","show1","show2","password","confirmPassword","rules","required","min","loginRules","v","emailRules","components","Message","methods","cleanForm","then","response","catch","error","console","setTimeout","exit"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\r\n    <v-container class=\"fill-height\" fluid>\r\n        <v-row justify=\"center\">\r\n          <v-col cols=\"12\" sm=\"8\" md=\"4\">\r\n            <Message :msg=\"msg\" v-show=\"msg\"/>\r\n            <v-card class=\"ml-12 mr-12\" ref=\"form\">\r\n              <v-card-text>\r\n\r\n                <h1 class=\"bold\">Registrar</h1>\r\n                <br/>\r\n\r\n                <v-form\r\n                    ref=\"form\"\r\n                    v-model=\"valid\"\r\n                    @submit=\"createUser()\"\r\n                    autocomplete=\"off\"\r\n                    lazy-validation\r\n                  >\r\n\r\n                    <v-text-field\r\n                      v-model=\"formData.Login\"\r\n                      outlined\r\n                      :rules=\"loginRules\"\r\n                      label=\"Login\"\r\n                      :value=\"formData.Login = (formData.Login == null) ? formData.Login : formData.Login.toUpperCase()\"\r\n                      required\r\n                    ></v-text-field>\r\n\r\n                    <v-text-field\r\n                      v-model=\"formData.Password\"\r\n                      outlined\r\n                      :append-icon=\"show1 ? 'mdi-eye' : 'mdi-eye-off'\"\r\n                      :type=\"show1 ? 'text' : 'password'\"\r\n                      :rules=\"[rules.required, rules.min]\"\r\n                      @click:append=\"show1 = !show1\"\r\n                      hint=\"At least 8 characters\"\r\n                      label=\"Senha\"\r\n                      :value=\"formData.Password = (formData.Password == null) ? formData.Password : formData.Password.toUpperCase()\"\r\n                      required\r\n                    ></v-text-field>\r\n\r\n                    <v-text-field\r\n                      v-model=\"formData.ConfirmPassword\"\r\n                      outlined\r\n                      :append-icon=\"show2 ? 'mdi-eye' : 'mdi-eye-off'\"\r\n                      :type=\"show2 ? 'text' : 'password'\"\r\n                      :rules=\"[rules.required, rules.min]\"\r\n                      hint=\"At least 8 characters\"\r\n                      @click:append=\"show2 = !show2\"\r\n                      label=\"Repetir Senha\"\r\n                      :value=\"formData.ConfirmPassword = (formData.ConfirmPassword == null) ? formData.ConfirmPassword : formData.ConfirmPassword.toUpperCase()\"\r\n                      required\r\n                    ></v-text-field>\r\n\r\n                    <v-text-field\r\n                      v-model=\"formData.Email\"\r\n                      outlined\r\n                      :rules=\"emailRules\"\r\n                      label=\"E-mail\"\r\n                      :value=\"formData.Email = (formData.Email == null) ? formData.Email : formData.Email.toUpperCase()\"\r\n                      required\r\n                    ></v-text-field>\r\n                    <v-row justify='end'>\r\n                      <v-col class=\"text-right\">\r\n                        <v-btn\r\n                            color=\"primary\"\r\n                            class=\"mr-3\"\r\n                            type=\"submit\"\r\n                            @click=\"createUser\">\r\n                            Cadastrar</v-btn>\r\n                        <v-btn\r\n                            color=\"error\"\r\n                            class=\"mr-0\"\r\n                            @click=\"cleanForm\">\r\n                            Limpar</v-btn>\r\n                      </v-col>\r\n                    </v-row>\r\n                </v-form>\r\n              </v-card-text>\r\n            </v-card>\r\n          </v-col>\r\n        </v-row>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\nimport api from '@/services/api.ts';\r\nimport Message from '@/components/Message.vue';\r\nexport default {\r\n\r\n  name: 'Register',\r\n\r\n  data: () => ({\r\n    valid: true,\r\n    msg: \"\",\r\n    formData: {\r\n      Login: '',\r\n      Password: '',\r\n      ConfirmPassword: '',\r\n      Email: ''\r\n    },\r\n    show1: false,\r\n    show2: false,\r\n    password: 'Password',\r\n    confirmPassword: 'ConfirmPassword',\r\n    rules: {\r\n      required: value => !!value || 'Required.',\r\n      min: v => v.length >= 4 || 'Min 4 characters'\r\n    },\r\n    loginRules: [\r\n      v => v.length >= 4 || 'Min 4 characters',\r\n      v => !!v || 'Login is required',\r\n      v => (v && v.length <= 10) || 'Login must be less than 10 characters'\r\n    ],\r\n    emailRules: [\r\n      v => !!v || 'E-mail is required',\r\n      v => /.+@.+\\..+/.test(v) || 'E-mail must be valid',\r\n    ]\r\n  }),\r\n  components: {\r\n    Message\r\n  },\r\n  methods: {\r\n    cleanForm () {\r\n      this.formData.Login = \"\";\r\n      this.formData.Password = \"\";\r\n      this.formData.ConfirmPassword = \"\";\r\n      this.formData.Email = \"\";\r\n    },\r\n    async createUser () {\r\n      \r\n      await api.post(\"/Users\",this.formData)\r\n        .then((response) => {\r\n          this.msg = response.data\r\n        })\r\n        .catch((error) => {\r\n          console.log(error.response)\r\n        })\r\n        \r\n      setTimeout(() => this.msg=\"\", 3000);\r\n      // quando criado, rotear para /login\r\n      exit();\r\n    },\r\n    exit() {\r\n      this.$route.go(-1);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\nbold {\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}