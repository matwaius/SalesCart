{"ast":null,"code":"import FormUpdate from \"@/components/FormUpdate.vue\";\nimport api from '@/services/api.ts';\nexport default {\n  name: \"users\",\n  props: {\n    id: Number\n  },\n  components: {\n    FormUpdate\n  },\n  data: () => ({\n    editing: false,\n    show1: false,\n    show2: false,\n    formData: {\n      Id: 0,\n      Login: \"\",\n      Password: \"\",\n      ConfirmPassword: \"\",\n      Email: \"\"\n    },\n    loginRules: [v => v.length >= 4 || 'Min. 4 Caracteres', v => !!v || 'Login é Obrigatório', v => v && v.length <= 10 || 'Min. 10 Caracteres'],\n    rules: {\n      required: value => !!value || 'Senha é Obrigatória.',\n      min: v => v.length >= 4 || 'Min. 4 Caracteres',\n      equal: value => value != this.formData.Password || 'Senha é Obrigatória.'\n    },\n    emailRules: [v => !!v || 'E-mail é Obrigatório.', v => /.+@.+\\..+/.test(v) || 'E-mail Invalido']\n  }),\n\n  mounted() {\n    if (this.id > 0) {\n      this.editing = true;\n      this.formData.Id = this.id;\n    }\n  },\n\n  methods: {\n    cleanForm() {\n      this.formData.Login = \"\";\n      this.formData.Password = \"\";\n      this.formData.ConfirmPassword = \"\";\n      this.formData.Email = \"\";\n    },\n\n    validacao() {\n      let retorno = true;\n\n      if (this.formData.Login.length == 0 || this.formData.Password.length == 0 || this.formData.ConfirmPassword.length == 0 || this.formData.Email.length == 0) {\n        retorno = false;\n        this.msg = \"Dados Incorreto\";\n        setTimeout(() => this.msg = \"\", 3000);\n        console.log('aaaa');\n      }\n\n      return retorno;\n    },\n\n    save() {\n      this.onSave();\n    },\n\n    async onSave() {\n      if (this.validacao() == true) {\n        if (this.editing == true) {\n          await api.put(\"/Users\", this.formData).then(response => {\n            this.msg = response.data;\n          }).catch(error => {\n            console.log(error.response);\n          });\n        } else {\n          await api.post(\"/Users\", this.formData).then(response => {\n            this.msg = response.data;\n          }).catch(error => {\n            console.log(error.response);\n          });\n        }\n\n        setTimeout(() => this.msg = \"\", 3000);\n        this.$router.go(-1);\n      }\n    },\n\n    async getUser() {\n      await api.get(\"/Users\", this.formData).then(response => {\n        this.msg = response.data;\n      }).catch(error => {\n        console.log(error.response);\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiFA;AACA;AAEA;EACAA,aADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACAC;EADA,CALA;EAQAC;IACAC,cADA;IAEAC,YAFA;IAGAC,YAHA;IAIAC;MACAC,KADA;MAEAC,SAFA;MAGAC,YAHA;MAIAC,mBAJA;MAKAC;IALA,CAJA;IAWAC,aACAC,yCADA,EAEAA,iCAFA,EAGAA,gDAHA,CAXA;IAgBAC;MACAC,oDADA;MAEAC,8CAFA;MAGAC;IAHA,CAhBA;IAqBAC,aACAL,mCADA,EAEAA,6CAFA;EArBA,EARA;;EAkCAM;IACA;MACA;MACA;IACA;EACA,CAvCA;;EAwCAC;IACAC;MACA;MACA;MACA;MACA;IACA,CANA;;IAOAC;MACA;;MACA,uCACA,kCADA,IAEA,yCAFA,IAGA,+BAHA,EAGA;QACAC;QACA;QACAC;QACAC;MACA;;MACA;IACA,CAnBA;;IAoBAC;MACA;IACA,CAtBA;;IAuBA;MACA;QACA;UACA,uCACAC,IADA,CACAC;YACA;UACA,CAHA,EAIAC,KAJA,CAIAC;YACAL;UACA,CANA;QAOA,CARA,MAQA;UACA,wCACAE,IADA,CACAC;YACA;UACA,CAHA,EAIAC,KAJA,CAIAC;YACAL;UACA,CANA;QAOA;;QACAD;QACA;MACA;IACA,CA7CA;;IA8CA;MACA,uCACAG,IADA,CACAC;QACA;MACA,CAHA,EAIAC,KAJA,CAIAC;QACAL;MACA,CANA;IAOA;;EAtDA;AAxCA","names":["name","props","id","components","FormUpdate","data","editing","show1","show2","formData","Id","Login","Password","ConfirmPassword","Email","loginRules","v","rules","required","min","equal","emailRules","mounted","methods","cleanForm","validacao","retorno","setTimeout","console","save","then","response","catch","error"],"sourceRoot":"src/views","sources":["Users-Register.vue"],"sourcesContent":["<template>\r\n  <div>\r\n  <Message :msg=\"msg\" v-show=\"true\"/>\r\n  <FormUpdate \r\n      title=\"Inserir Usuário\"\r\n      :width=\"800\"\r\n      :maxHeight=\"350\"\r\n      @onSave=\"save\"\r\n      >\r\n      <template slot=\"body\">\r\n        <!--CONTEUDO-->\r\n        <v-row>\r\n          <v-col>\r\n            <v-form ref=\"formUsuarios\"\r\n                    @submit.prevent=\"onSave\"\r\n                    autocomplete=\"off\">\r\n              <v-container>\r\n                <v-row>\r\n                  <v-col cols=\"4\"\r\n                        style=\"display: inline-block\">\r\n                        <v-text-field\r\n                        v-model=\"formData.Login\"\r\n                        :rules=\"loginRules\"\r\n                        label=\"Login\"\r\n                        :value=\"formData.Login= (formData.Login == null) ? formData.Login : formData.Login.toUpperCase()\"\r\n                        required\r\n                      ></v-text-field>\r\n                  </v-col>\r\n                  <v-col cols=\"4\"\r\n                        style=\"display: inline-block\">\r\n                        <v-text-field\r\n                          v-model=\"formData.Password\"\r\n                          :append-icon=\"show1 ? 'mdi-eye' : 'mdi-eye-off'\"\r\n                          :type=\"show1 ? 'text' : 'password'\"\r\n                          :rules=\"[rules.required, rules.min]\"\r\n                          @click:append=\"show1 = !show1\"\r\n                          hint=\"Min. 4 Caracteres\"\r\n                          label=\"Senha\"\r\n                          :value=\"formData.Password = (formData.Password == null) ? formData.Password : formData.Password.toUpperCase()\"\r\n                          required\r\n                        ></v-text-field>\r\n                  </v-col>\r\n                  <v-col cols=\"4\"\r\n                        style=\"display: inline-block\">\r\n                        <v-text-field\r\n                          v-model=\"formData.ConfirmPassword \"\r\n                          :append-icon=\"show2 ? 'mdi-eye' : 'mdi-eye-off'\"\r\n                          :type=\"show2 ? 'text' : 'password'\"\r\n                          :rules=\"[rules.required, rules.min,rules.equal]\"\r\n                          @click:append=\"show2 = !show2\"\r\n                          hint=\"Min. 4 Caracteres\"\r\n                          label=\"Confirmar Senha\"\r\n                          :value=\"formData.ConfirmPassword  = (formData.ConfirmPassword  == null) ? formData.ConfirmPassword  : formData.ConfirmPassword .toUpperCase()\"\r\n                          required\r\n                        ></v-text-field>\r\n                  </v-col>\r\n                </v-row> \r\n                <v-row>\r\n                  <v-col cols=\"12\"\r\n                        style=\"display: inline-block\">\r\n                        <v-text-field\r\n                      v-model=\"formData.Email\"\r\n                      :rules=\"emailRules\"\r\n                      label=\"E-mail\"\r\n                      :value=\"formData.Email = (formData.Email== null) ? formData.Email : formData.Email.toUpperCase()\"\r\n                      required\r\n                    ></v-text-field>\r\n                    \r\n                  </v-col>\r\n                  \r\n                </v-row>\r\n              </v-container>\r\n            </v-form>\r\n          </v-col>\r\n        </v-row>\r\n      </template>\r\n  </FormUpdate>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport FormUpdate from \"@/components/FormUpdate.vue\";\r\nimport api from '@/services/api.ts';\r\n\r\nexport default {\r\n  name:\"users\",\r\n  props: {\r\n      id: Number\r\n  },\r\n  components: {\r\n    FormUpdate,\r\n  },\r\n  data: () => ({\r\n    editing: false,\r\n    show1: false,\r\n    show2: false,\r\n    formData: {\r\n      Id: 0,\r\n      Login: \"\",\r\n      Password: \"\",\r\n      ConfirmPassword: \"\",\r\n      Email: \"\"\r\n    },\r\n    loginRules: [\r\n      v => v.length >= 4 || 'Min. 4 Caracteres',\r\n      v => !!v || 'Login é Obrigatório',\r\n      v => (v && v.length <= 10) || 'Min. 10 Caracteres'\r\n    ],\r\n    rules: {\r\n      required: value => !!value || 'Senha é Obrigatória.',\r\n      min: v => v.length >= 4 || 'Min. 4 Caracteres',\r\n      equal: value => value != this.formData.Password || 'Senha é Obrigatória.',\r\n    },\r\n    emailRules: [\r\n      v => !!v || 'E-mail é Obrigatório.',\r\n      v => /.+@.+\\..+/.test(v) || 'E-mail Invalido',\r\n    ]\r\n  }),\r\n  mounted(){\r\n    if(this.id > 0){\r\n        this.editing= true;\r\n        this.formData.Id = this.id;\r\n    }\r\n  },\r\n  methods:{\r\n    cleanForm () {\r\n      this.formData.Login = \"\";\r\n      this.formData.Password = \"\";\r\n      this.formData.ConfirmPassword = \"\";\r\n      this.formData.Email = \"\";\r\n    },\r\n    validacao() {\r\n      let retorno =true;\r\n      if(this.formData.Login.length == 0 || \r\n          this.formData.Password.length == 0 || \r\n          this.formData.ConfirmPassword.length == 0 ||\r\n          this.formData.Email.length == 0){\r\n          retorno= false;\r\n          this.msg = \"Dados Incorreto\";\r\n          setTimeout(() => this.msg=\"\", 3000);\r\n          console.log('aaaa');\r\n      }\r\n      return retorno;\r\n    },\r\n    save() {\r\n      this.onSave();\r\n    },\r\n    async onSave () {\r\n      if(this.validacao() == true ){\r\n        if(this.editing == true){\r\n          await api.put(\"/Users\",this.formData)\r\n            .then((response) => {\r\n              this.msg = response.data\r\n            })\r\n            .catch((error) => {\r\n              console.log(error.response)\r\n            })\r\n        }else{\r\n          await api.post(\"/Users\",this.formData)\r\n            .then((response) => {\r\n              this.msg = response.data\r\n            })\r\n            .catch((error) => {\r\n              console.log(error.response)\r\n            })\r\n        }\r\n        setTimeout(() => this.msg=\"\", 3000);\r\n        this.$router.go(-1);\r\n      }\r\n    },\r\n    async getUser(){\r\n      await api.get(\"/Users\",this.formData)\r\n            .then((response) => {\r\n              this.msg = response.data\r\n            })\r\n            .catch((error) => {\r\n              console.log(error.response)\r\n            })\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}